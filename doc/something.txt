
一些细节：

一、关于构造函数和析构函数的处理

在Object Pascal中，class的构造函数和析构函数要传入额外的参数：一个是class类型（VMT指针），一个是标记参数，用于指示是否创建实例等状态。比如：

type
	TMyObj = class
	public
		constructor Create(a: Integer);
	end;

这个Create其实真的原型是这样的：
void* Create(void* pVmt, char flag, int a)

flag如果等于0，则表示Create不是最外围的，一些初始化就不必做了，此时pVmt是已经创建的实例。如果flag小于0，表示pVmt是已经创建的实例。如果flag大于0，pVmt是VMT指针。

在Create之中，首先判断flag是否等于0，如果是，绕过初始化和AfterConstruction，因为这是外围构造函数的事。如果flag大于0，则要先分配内存以及初始化，以及安装异常处理。如果小于0，则只有安装异常处理这一步，请查看ClassCreate函数。

在初始化和执行Create之中的代码之后，最外围的构造函数要调用AfterConstruction，并撤销异常处理。这个异常处理保证了在构造之时发生异常，能及时释放内存。（此处的设计十分精妙，所有构造函数都共享一段异常处理，效率和程序大小都兼顾了）

如果这件事用LLVM来完成，有点复杂，因为LLVM的异常处理机制没办法在某一处安装，然后在另一处撤销。只能在同一函数。因此，只能做一些变通。这里用C++来描述改进后的方案：

void* Create(void* pVmt, char flag, int a)
{
	void* pInst;
	if (flag > 0)
		pInst = NewInstance(pVmt);
	else
		pInst = pVmt;

	try {
		// call parent's constructor
		TObject::Create(pInst, 0);

		// code...

		// call AfterConstruction
		if (flag != 0)
			AfterConstruction(pInst);

		return pInst;
	} catch(...) {
		if (flag != 0)
			FreeInstance(pInst);
		throw;
	}
}

这样每个构造函数必须有try catch，这将导致程序变大。

对于析构函数也额外的参数传入。一个是实例指针，一个是标记参数，用于指示是否最外围析构函数。如果是最外围的，进入时要调用BeforeDestruction，退时之前要调用ClassDestroy；

void Destroy(void* Self, char outterMost)
{
	if (outterMost != 0)
		BeforeDestruction(Self);
	TObject::Destroy(Self, 0);
	if (outterMost != 0)
		FreeInstance(Self);
}

二、内嵌函数


三、字符串、Variant、接口


四、异常处理

LLVM异常处理一般形式：

  %.ex.addr = alloca i8*
  
  invoke void @RaiseSomeExcept()
          to label %next.stmt unwind label %lpad
next.stmt:
  ; ... some statement
  br label %try.leave

lpad:
  %1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = tail call i8* @__cxa_begin_catch(i8* %2) nounwind
  store i8* %3, i8** %.ex.addr
  br label lpad.body
lpad.body:
  ; 做某些处理
  
  ; 异常已经处理完成
  tail call void @__cxa_end_catch()
  br label %try.leave

  ; 如果没有得到处理，需要向上传播，则使用resume，把流程交给C++异常处理
except.lpad.1.resume:
  resume {i8*, i32} %1
  unreachable

try.leave:

以上是只有一个异常处理块（一个 try except end 语句）的情况，如果在try语句之中嵌套异常，则机制略有些复杂。在内层异常得不到处理的时候，需要自己跳转到外层继续处理。不能使用resume来跳转

如果在异常处理之中使用 try except end 或 try finally end ？
try

except
	try
	except
	end;
end;

如果在异常处理这中使用Exit, Continue, Break?

for i := 0 to len - 1 do
begin
	try
		someAction;
	except
		try
			if i = 3 then Break;
			someAction;
		except
			if i = 4 then Continue;
		end;
	end;
end;





